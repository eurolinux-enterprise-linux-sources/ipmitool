514218 - ipmitool sol payload commands do not check input values

Sent upstream as:
http://sourceforge.net/mailarchive/message.php?msg_name=20091110143201.30174.87827.stgit%40dhcp-lab-211.englab.brq.redhat.com
http://sourceforge.net/mailarchive/message.php?msg_name=20091110143208.30174.97620.stgit%40dhcp-lab-211.englab.brq.redhat.com

Check the user where possible. I've looked for 'user' in ipmitool
manpage to find the occurences, I hope I got all of them.


Check the channel where possible. I've looked for 'channel' in ipmitool
manpage to find the occurences, I hope I got all of them.

diff -up ipmitool-1.8.11/include/ipmitool/helper.h.cmdline-checks ipmitool-1.8.11/include/ipmitool/helper.h
--- ipmitool-1.8.11/include/ipmitool/helper.h.cmdline-checks	2012-02-20 17:58:47.570445636 +0100
+++ ipmitool-1.8.11/include/ipmitool/helper.h	2012-02-20 17:58:47.623445325 +0100
@@ -81,6 +81,9 @@ void ipmi_start_daemon(struct ipmi_intf
 
 unsigned char *ipmi_parse_hex(const char *str);
 
+int parse_user(const char *arg, uint8_t *user);
+int parse_channel(const char *arg, uint8_t *channel);
+
 #define ipmi_open_file_read(file)	ipmi_open_file(file, 0)
 #define ipmi_open_file_write(file)	ipmi_open_file(file, 1)
 
diff -up ipmitool-1.8.11/lib/helper.c.cmdline-checks ipmitool-1.8.11/lib/helper.c
--- ipmitool-1.8.11/lib/helper.c.cmdline-checks	2012-02-20 17:58:47.600445459 +0100
+++ ipmitool-1.8.11/lib/helper.c	2012-02-20 17:58:47.624445319 +0100
@@ -499,3 +499,37 @@ ipmi_parse_hex(const char *str)
 
 	return out;
 }
+
+int parse_user(const char *arg, uint8_t *user)
+{
+	char *end;
+	unsigned long val;
+
+	errno = 0;
+	val = strtoul(arg, &end, 0);
+	/* User ID is 6-bit integer, value 0 is reserved. */
+	if (errno != 0 || *end != '\0' || val > 0x3f || val == 0) {
+		lprintf(LOG_ERR, "Invalid user: %s\n", arg);
+		return -1;
+	}
+
+	*user = val;
+	return 0;
+}
+
+int parse_channel(const char *arg, uint8_t *channel)
+{
+	char *end;
+	unsigned long val;
+	errno = 0;
+
+	val = strtoul(arg, &end, 0);
+	/* Channel is 4-bit integer. */
+	if (errno != 0 || *end != '\0' || val > 0xf) {
+		lprintf(LOG_ERR, "Invalid channel: %s\n", arg);
+		return -1;
+	}
+
+	*channel = val;
+	return 0;
+}
diff -up ipmitool-1.8.11/lib/ipmi_channel.c.cmdline-checks ipmitool-1.8.11/lib/ipmi_channel.c
--- ipmitool-1.8.11/lib/ipmi_channel.c.cmdline-checks	2012-02-20 17:58:47.574445612 +0100
+++ ipmitool-1.8.11/lib/ipmi_channel.c	2012-02-20 17:58:47.627445301 +0100
@@ -451,8 +451,11 @@ ipmi_set_user_access(struct ipmi_intf *
                 return 0;
         }
 
-	channel = (uint8_t)strtol(argv[0], NULL, 0);
-	userid = (uint8_t)strtol(argv[1], NULL, 0);
+	if (parse_channel(argv[0], &channel) != 0)
+		return -1;
+
+	if (parse_user(argv[1], &userid) != 0)
+		return -1;
 
 	memset(&req, 0, sizeof(req));
 	req.msg.netfn = IPMI_NETFN_APP;
@@ -891,22 +894,29 @@ ipmi_channel_main(struct ipmi_intf * int
 	}
 	else if (strncmp(argv[0], "authcap", 7) == 0)
 	{
+		uint8_t channel;
 		if (argc != 3)
 			printf_channel_usage();
-		else
-			retval = ipmi_get_channel_auth_cap(intf,
-                                               (uint8_t)strtol(argv[1], NULL, 0),
+		else {
+			if (parse_channel(argv[1], &channel) != 0)
+				retval  = -1;
+			else
+				retval = ipmi_get_channel_auth_cap(intf, channel,
                                                (uint8_t)strtol(argv[2], NULL, 0));
+		}
 	}
 	else if (strncmp(argv[0], "getaccess", 10) == 0)
 	{
 		if ((argc < 2) || (argc > 3))
 			printf_channel_usage();
 		else {
-			uint8_t ch = (uint8_t)strtol(argv[1], NULL, 0);
+			uint8_t ch;
 			uint8_t id = 0;
+			if (parse_channel(argv[1], &ch) != 0)
+				return -1;
 			if (argc == 3)
-				id = (uint8_t)strtol(argv[2], NULL, 0);
+				if (parse_user(argv[2], &id) != 0)
+					return -1;
 			retval = ipmi_get_user_access(intf, ch, id);
 		}
 	}
@@ -921,7 +931,8 @@ ipmi_channel_main(struct ipmi_intf * int
 		else {
 			uint8_t ch = 0xe;
 			if (argc == 2)
-				ch = (uint8_t)strtol(argv[1], NULL, 0);
+				if (parse_channel(argv[1], &ch) != 0)
+					return -1;
 			retval = ipmi_get_channel_info(intf, ch);
 		}
 	}
diff -up ipmitool-1.8.11/lib/ipmi_firewall.c.cmdline-checks ipmitool-1.8.11/lib/ipmi_firewall.c
--- ipmitool-1.8.11/lib/ipmi_firewall.c.cmdline-checks	2009-02-25 21:38:52.000000000 +0100
+++ ipmitool-1.8.11/lib/ipmi_firewall.c	2012-02-20 17:58:47.628445295 +0100
@@ -89,8 +89,12 @@ ipmi_firewall_parse_args(int argc, char
 	}
 	for (i=0; i<argc; i++) {
 		if (strncmp(argv[i], "channel", 7) == 0) {
-			if (++i < argc)
-				p->channel = strtol(argv[i], NULL, 0);
+			if (++i < argc) {
+				uint8_t channel;
+				if (parse_channel(argv[i], &channel) != 0)
+					return -1;
+				p->channel = channel;
+			}
 		}
 		else if (strncmp(argv[i], "lun", 3) == 0) {
 			if (++i < argc)
diff -up ipmitool-1.8.11/lib/ipmi_lanp.c.cmdline-checks ipmitool-1.8.11/lib/ipmi_lanp.c
--- ipmitool-1.8.11/lib/ipmi_lanp.c.cmdline-checks	2009-02-25 21:38:52.000000000 +0100
+++ ipmitool-1.8.11/lib/ipmi_lanp.c	2012-02-20 17:58:47.630445283 +0100
@@ -1361,7 +1361,8 @@ ipmi_lan_set(struct ipmi_intf * intf, in
 		return 0;
 	}
 
-	chan = (uint8_t)strtol(argv[0], NULL, 0);
+	if (parse_channel(argv[0], &chan) != 0)
+			return -1;
 
 	/* find type of channel and only accept 802.3 LAN */
 	if (is_lan_channel(intf, chan) == 0) {
@@ -1944,7 +1945,8 @@ ipmi_lan_alert(struct ipmi_intf * intf,
 			return 0;
 		}
 
-		channel = (uint8_t)strtol(argv[1], NULL, 0);
+		if (parse_channel(argv[1], &channel) != 0)
+				return -1;
 		if (is_lan_channel(intf, channel) == 0) {
 			lprintf(LOG_ERR, "Channel %d is not a LAN channel", channel);
 			return -1;
@@ -2155,14 +2157,9 @@ ipmi_lanp_main(struct ipmi_intf * intf,
 	    strncmp(argv[0], "print", 5) == 0)
 	{
 		if (argc > 1)
-			chan = (uint8_t)strtol(argv[1], NULL, 0);
-		if (chan < 1 || chan > IPMI_CHANNEL_NUMBER_MAX)
-		{
-			lprintf(LOG_ERR, "Invalid channel: %d", chan);
-			return -1;
-		}
-		else
-			rc = ipmi_lan_print(intf, chan);
+			if (parse_channel(argv[1], &chan) != 0)
+				return -1;
+		rc = ipmi_lan_print(intf, chan);
 	}
 	else if (strncmp(argv[0], "set", 3) == 0)
 	{
@@ -2180,14 +2177,10 @@ ipmi_lanp_main(struct ipmi_intf * intf,
 			return -1;
 		}
 		else if (argc > 2)
-			chan = (uint8_t)strtol(argv[2], NULL, 0);
+			if (parse_channel(argv[2], &chan) != 0)
+					return -1;
 
-		if (chan < 1 || chan > IPMI_CHANNEL_NUMBER_MAX)
-		{
-			lprintf(LOG_ERR, "Invalid channel: %d", chan);
-			return -1;
-		}
-		else if (strncmp(argv[1], "get", 3) == 0)
+		if (strncmp(argv[1], "get", 3) == 0)
 			rc = ipmi_lan_stats_get(intf, chan);
 		else if (strncmp(argv[1], "clear", 5) == 0)
 			rc = ipmi_lan_stats_clear(intf, chan);
diff -up ipmitool-1.8.11/lib/ipmi_raw.c.cmdline-checks ipmitool-1.8.11/lib/ipmi_raw.c
--- ipmitool-1.8.11/lib/ipmi_raw.c.cmdline-checks	2009-02-25 21:38:52.000000000 +0100
+++ ipmitool-1.8.11/lib/ipmi_raw.c	2012-02-20 17:58:47.632445271 +0100
@@ -150,7 +150,8 @@ ipmi_rawspd_main(struct ipmi_intf * intf
 	i2cbus  =  (uint8_t)strtoul(argv[0], NULL, 0);
 	i2caddr =  (uint8_t)strtoul(argv[1], NULL, 0);
 	if( argc >= 3 ){
-		channel	= (uint8_t)strtoul(argv[2], NULL, 0);
+		if (parse_channel(argv[2], &channel) != 0)
+				return -1;
 	}
 	if( argc >= 4 ){
 		msize	  =  (uint8_t)strtoul(argv[3], NULL, 0);
diff -up ipmitool-1.8.11/lib/ipmi_sol.c.cmdline-checks ipmitool-1.8.11/lib/ipmi_sol.c
--- ipmitool-1.8.11/lib/ipmi_sol.c.cmdline-checks	2012-02-20 17:58:47.580445576 +0100
+++ ipmitool-1.8.11/lib/ipmi_sol.c	2012-02-20 17:58:47.633445265 +0100
@@ -1925,7 +1925,10 @@ ipmi_sol_main(struct ipmi_intf * intf, i
 		if (argc == 1)
 			channel = 0x0E; /* Ask about the current channel */
 		else if (argc == 2)
-			channel = (uint8_t)strtol(argv[1], NULL, 0);
+		{
+			if (parse_channel(argv[1], &channel) != 0)
+					return -1;
+		}
 		else
 		{
 			print_sol_usage();
@@ -1957,11 +1960,13 @@ ipmi_sol_main(struct ipmi_intf * intf, i
 
 		if (argc >= 3)
 		{
-			channel = (uint8_t)strtol(argv[2], NULL, 0);
+			if (parse_channel(argv[2], &channel) != 0)
+				return -1;
 		}
 		if (argc == 4)
 		{
-			userid = (uint8_t)strtol(argv[3], NULL, 0);
+			if (parse_user(argv[3], &userid) != 0)
+				return -1;
 		}
 
 		if (!strncmp(argv[1], "enable", 6))
@@ -2002,11 +2007,13 @@ ipmi_sol_main(struct ipmi_intf * intf, i
 			if (!strncmp(argv[3], "noguard", 7))
 				guard = 0;
 			else
-				channel = (uint8_t)strtol(argv[3], NULL, 0);
+				if (parse_channel(argv[3], &channel) != 0)
+					return -1;
 		}
 		else if (argc == 5)
 		{
-			channel = (uint8_t)strtol(argv[3], NULL, 0);
+			if (parse_channel(argv[3], &channel) != 0)
+				return -1;
 			if (!strncmp(argv[4], "noguard", 7))
 				guard = 0;
 		}
diff -up ipmitool-1.8.11/lib/ipmi_sunoem.c.cmdline-checks ipmitool-1.8.11/lib/ipmi_sunoem.c
--- ipmitool-1.8.11/lib/ipmi_sunoem.c.cmdline-checks	2009-02-25 21:38:52.000000000 +0100
+++ ipmitool-1.8.11/lib/ipmi_sunoem.c	2012-02-20 17:58:47.622445331 +0100
@@ -831,7 +831,8 @@ ipmi_sunoem_main(struct ipmi_intf * intf
 				ipmi_sunoem_usage();
 				return -1;
 			}
-			uid = (uint8_t)strtoul(argv[2], NULL, 0);
+			if (parse_user(argv[2], &uid) != 0)
+				return -1;
 			rc = ipmi_sunoem_sshkey_del(intf, uid);
 		}
 		else if (strncmp(argv[1], "set", 3) == 0) {
@@ -840,7 +841,8 @@ ipmi_sunoem_main(struct ipmi_intf * intf
 				ipmi_sunoem_usage();
 				return -1;
 			}
-			uid = (uint8_t)strtoul(argv[2], NULL, 0);
+			if (parse_user(argv[2], &uid) != 0)
+				return -1;
 			rc = ipmi_sunoem_sshkey_set(intf, uid, argv[3]);
 		}
 	}
diff -up ipmitool-1.8.11/lib/ipmi_user.c.cmdline-checks ipmitool-1.8.11/lib/ipmi_user.c
--- ipmitool-1.8.11/lib/ipmi_user.c.cmdline-checks	2009-02-25 21:38:52.000000000 +0100
+++ ipmitool-1.8.11/lib/ipmi_user.c	2012-02-20 17:58:47.634445260 +0100
@@ -538,7 +538,10 @@ ipmi_user_main(struct ipmi_intf * intf,
 		if (argc == 1)
 			channel = 0x0E; /* Ask about the current channel */
 		else if (argc == 2)
-			channel = (uint8_t)strtol(argv[1], NULL, 0);
+		{
+			if (parse_channel(argv[1], &channel) != 0)
+					return -1;
+		}
 		else
 		{
 			print_user_usage();
@@ -559,7 +562,11 @@ ipmi_user_main(struct ipmi_intf * intf,
 		if (argc == 1)
 			channel = 0x0E; /* Ask about the current channel */
 		else if (argc == 2)
-			channel = (uint8_t)strtol(argv[1], NULL, 0);
+		{
+			if (parse_channel(argv[1], &channel) != 0)
+					return -1;
+
+		}
 		else
 		{
 			print_user_usage();
@@ -583,15 +590,10 @@ ipmi_user_main(struct ipmi_intf * intf,
 		{
 			char * password = NULL;
 			int password_length = atoi(argv[2]);
-			uint8_t user_id = (uint8_t)strtol(argv[1],
-							  NULL,
-							  0);
-			if (user_id == 0)
-			{
-				lprintf(LOG_ERR, "Invalid user ID: %d", user_id);
-				return -1;
-			}
+			uint8_t user_id;
 
+			if (parse_user(argv[1], &user_id) != 0)
+				return -1;
 
 			if (argc == 3)
 			{
@@ -642,15 +644,10 @@ ipmi_user_main(struct ipmi_intf * intf,
 		    (strncmp("password", argv[1], 8) == 0))
 		{
 			char * password = NULL;
-			uint8_t user_id = (uint8_t)strtol(argv[2],
-							  NULL,
-							  0);
-			if (user_id == 0)
-			{
-				lprintf(LOG_ERR, "Invalid user ID: %d", user_id);
-				return -1;
-			}
+			uint8_t user_id;
 
+			if (parse_user(argv[2], &user_id) != 0)
+				return -1;
 
 			if (argc == 3)
 			{
@@ -715,17 +712,17 @@ ipmi_user_main(struct ipmi_intf * intf,
 		else if ((argc >= 2) &&
 			 (strncmp("name", argv[1], 4) == 0))
 		{
+			uint8_t user_id;
 			if (argc != 4)
 			{
 				print_user_usage();
 				return -1;
 			}
+			if (parse_user(argv[2], &user_id) != 0)
+				return -1;
 
-			retval = ipmi_user_set_username(intf,
-							(uint8_t)strtol(argv[2],
-									NULL,
-									0),
-							argv[3]);
+
+			retval = ipmi_user_set_username(intf, user_id, argv[3]);
 		}
 		else
 		{
@@ -747,11 +744,12 @@ ipmi_user_main(struct ipmi_intf * intf,
 		}
 		if (argc == 4)
 		{
-			channel = (uint8_t)strtol(argv[3], NULL, 0);
-			channel = (channel & 0x0f);
+			if (parse_channel(argv[3], &channel) != 0)
+					return -1;
 		}
 
-		user_id = (uint8_t)strtol(argv[1], NULL, 0);
+		if (parse_user(argv[1], &user_id) != 0)
+			return -1;
 
 		priv_level = (uint8_t)strtol(argv[2], NULL, 0);
 		priv_level = (priv_level & 0x0f);
@@ -782,16 +780,8 @@ ipmi_user_main(struct ipmi_intf * intf,
 			print_user_usage();
 			return -1;
 		}
-
-		user_id = (uint8_t)strtol(argv[1],
-					  NULL,
-					  0);
-		if (user_id == 0)
-		{
-			lprintf(LOG_ERR, "Invalid user ID: %d", user_id);
+		if (parse_user(argv[1], &user_id) != 0)
 			return -1;
-		}
-
 
 		operation = (strncmp(argv[0], "disable", 7) == 0) ?
 			IPMI_PASSWORD_DISABLE_USER : IPMI_PASSWORD_ENABLE_USER;
